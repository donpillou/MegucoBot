
bots = "Src/Bots/*.cpp"
bots = "$(patsubst Src/Bots/%.cpp,%,$(bots))"
bots -= "Main"

brokers = "Src/Brokers/*.cpp"
brokers = "$(patsubst Src/Brokers/%.cpp,%,$(brokers))"
brokers -= "Main"

services = "User"

if configuration == "Debug" {
  defines += { "_DEBUG", "DEBUG" }
} else {
  defines += { "NDEBUG" }
}

buildDir = "Build/$(configuration)/$(target)"

targets = {

  MegucoServer = cppApplication + {
    dependencies = { "libnstd", "libzlimdbclient", "liblz4" } + bots + brokers + services
    buildDir = "Build/$(configuration)"
    includePaths = {
      "Ext/libnstd/include"
      "Ext/libzlimdbclient/include"
      "Ext/libmegucoprotocol/include"
    }
    libPaths = {
      "Build/$(configuration)/libnstd"
      "Build/$(configuration)/libzlimdbclient"
      "Build/$(configuration)/liblz4"
    }
    libs = { "nstd", "zlimdbclient", "lz4" }
    root = "Src"
    files = {
      "Src/*.cpp" = cppSource
      "Src/*.h"
      "Src/Tools/ProcessManager.cpp" = cppSource
      "Src/Tools/ProcessManager.h"
      "Src/Tools/ZlimdbConnection.cpp" = cppSource
      "Src/Tools/ZlimdbConnection.h"
    }
    if tool == "vcxproj" {
      libs += { "ws2_32" }
      linkFlags += { "/SUBSYSTEM:CONSOLE" }
    }
    if platform == "Linux" {
      libs += { "pthread", "rt" }
      cppFlags += { "-Wno-delete-non-virtual-dtor" }
    }
  }

  "$(services)" = cppApplication + {
    dependencies = { "libnstd", "libzlimdbclient", "liblz4" }
    folder = "Services"
    buildDir = "Build/$(configuration)/Services/$(target)"
    includePaths = {
      "Src",
      "Ext/libnstd/include"
      "Ext/libzlimdbclient/include"
      "Ext/libmegucoprotocol/include"
    }
    libPaths = {
      "Build/$(configuration)/libnstd"
      "Build/$(configuration)/libzlimdbclient"
      "Build/$(configuration)/liblz4"
    }
    libs = { "nstd", "zlimdbclient", "lz4" }
    root = { "Src/Services/$(target)", "Src" }
    files = {
      "Src/Services/$(target)/**.cpp" = cppSource
      "Src/Services/$(target)/**.h"
      "Src/Tools/ZlimdbConnection.cpp" = cppSource
      "Src/Tools/ZlimdbConnection.h"
    }
    if tool == "vcxproj" {
      libs += { "ws2_32" }
      linkFlags += { "/SUBSYSTEM:CONSOLE" }
    }
    if platform == "Linux" {
      libs += { "pthread", "rt" }
      cppFlags += { "-Wno-delete-non-virtual-dtor" }
    }
  }
  
  "$(bots)" = cppApplication + {
    folder = "Bots"
    dependencies = { "libnstd", "libzlimdbclient", "liblz4" }
    defines += { "BOT_$(upper $(target))" }
    buildDir = "Build/$(configuration)/Bots/$(target)"
    outputDir = "Build/$(configuration)/"
    includePaths = {
      "Src",
      "Src/Bots",
      "Ext/libnstd/include"
      "Ext/libzlimdbclient/include"
      "Ext/libmegucoprotocol/include"
    }
    libPaths = {
      "Build/$(configuration)/libnstd"
      "Build/$(configuration)/libzlimdbclient"
      "Build/$(configuration)/liblz4"
    }
    libs = { "nstd", "zlimdbclient", "lz4" }
    root = { "Src/Bots", "Src" }
    files = {
      "Src/Bots/$(target).cpp" = cppSource
      "Src/Bots/$(target).h"
      "Src/Bots/Tools/*.cpp" = cppSource
      "Src/Bots/Tools/*.h"
      "Src/Bots/Main.cpp" = cppSource
      "Src/Bots/Main.h"
      "Src/Tools/Hex.cpp" = cppSource
      "Src/Tools/Hex.h"
      "Src/Tools/Json.cpp" = cppSource
      "Src/Tools/Json.h"
      "Src/Tools/Sha256.cpp" = cppSource
      "Src/Tools/Sha256.h"
      "Src/Tools/ZlimdbConnection.cpp" = cppSource
      "Src/Tools/ZlimdbConnection.h"
    }
    if tool == "vcxproj" {
      libs += { "ws2_32" }
      linkFlags += { "/SUBSYSTEM:CONSOLE" }
    }
    if platform == "Linux" {
      libs += { "pthread", "rt" }
    }
  }

  "$(brokers)" = cppApplication + {
    folder = "Brokers"
    dependencies = { "libnstd", "libzlimdbclient", "liblz4" }
    defines += { "MARKET_$(upper $(target))" }
    buildDir = "Build/$(configuration)/Brokers/$(target)"
    output = "Build/$(configuration)/$(target)$(if $(Win32),.exe,)"
    includePaths = {
      "Src",
      "Src/Brokers",
      "Ext/libnstd/include"
      "Ext/libzlimdbclient/include"
      "Ext/libmegucoprotocol/include"
    }
    libPaths = {
      "Build/$(configuration)/libnstd"
      "Build/$(configuration)/libzlimdbclient"
      "Build/$(configuration)/liblz4"
    }
    libs = { "nstd", "zlimdbclient", "lz4", "curl" }
    root = { "Src/Brokers", "Src" }
    files = {
      "Src/Brokers/$(target).cpp" = cppSource
      "Src/Brokers/$(target).h"
      "Src/Brokers/Tools/*.cpp" = cppSource
      "Src/Brokers/Tools/*.h"
      "Src/Brokers/Main.cpp" = cppSource
      "Src/Brokers/Main.h"
      "Src/Tools/Hex.cpp" = cppSource
      "Src/Tools/Hex.h"
      "Src/Tools/Json.cpp" = cppSource
      "Src/Tools/Json.h"
      "Src/Tools/Sha256.cpp" = cppSource
      "Src/Tools/Sha256.h"
      "Src/Tools/ZlimdbConnection.cpp" = cppSource
      "Src/Tools/ZlimdbConnection.h"
    }
    if tool == "vcxproj" {
      libs += { "ws2_32" }
      dependencies += { "libcurl" }
      linkFlags += { "/SUBSYSTEM:CONSOLE" }
      defines += { "CURL_STATICLIB" }
      includePaths += {
        "Ext/curl/include",
        "Build/$(configuration)/libcurl/include"
        "Build/$(configuration)/libcurl/include/curl"
      }
      libPaths += {
        "Build/$(configuration)/libcurl"
      }
    }
    if platform == "Linux" {
      libs += { "pthread", "rt" }
    }
  }

  include "Ext/libnstd/libnstd.mare"
  libnstd += {
    folder = "Libraries"
  }

  include "Ext/libzlimdbclient/libzlimdbclient.mare"
  libzlimdbclient += {
    folder = "Libraries"
  }

  liblz4 = cppStaticLibrary + {
    folder = "Libraries"
    includePaths = { "Ext/lz4" }
    root = { "Ext/lz4" }
    files = {
      "Ext/lz4/lz4.c" = cSource,
      "Ext/lz4/lz4.h"
    }
  }

  if tool == "vcxproj" {
    libcurl = cStaticLibrary + {
      buildDir = "Build/$(configuration)/$(target)"
      folder = "Libraries"
      root = { "Ext/curl/lib", "Ext/curl/include" }
      defines += { "$(if $(Win32),WIN32 _WINDOWS)", "_USRDLL", "BUILDING_LIBCURL", "CURL_STATICLIB", "HTTP_ONLY", "USE_WINDOWS_SSPI", "USE_SCHANNEL" /*"USE_SSLEAY", "USE_OPENSSL"*/ }
      includePaths = {
        "Ext/curl/include"
        "Ext/curl/lib"
        "$(buildDir)/include"
        "$(buildDir)/include/curl"
      }
      files = {
        "Ext/curl/include/curl/curlbuild.h.dist" = copyFile + {
          output = "$(buildDir)/include/curl/curlbuild.h"
        }
        "Ext/curl/lib/**.c" = cSource
        "Ext/curl/lib/**.h"
      }
    }
  }
}

copyFile = {
  message = "$(if $(Win32),$(notdir $(file)),$(file)) (copy)"
  input = file
  output = "$(buildDir)/$(notdir $(file))"
  if platform == "Win32" {
    command = "copy $(subst /,\\,$(file)) $(subst /,\\,$(output))"
  } else { 
    command = "cp $(file) $(output)"
  }
  folder = ".copy"
}


